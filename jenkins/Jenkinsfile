/*******************************************************************************
 * Copyright (c) 2022 Bosch.IO GmbH and others.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 *    http://www.eclipse.org/legal/epl-v20.html
 * and the Eclipse Distribution License is available at
 *    http://www.eclipse.org/org/documents/edl-v10.html.
 * 
 * Contributors:
 *    Bosch IO GmbH - initial implementation
 ******************************************************************************/

pipeline {

/*******************************************************************************
 * Intended to be used as "Pipeline script from SCM".
 * Create a pipeline job and configure the repo and branch
 * to be build in the SCM git definition of the pipeline
 ******************************************************************************/

  agent {
    kubernetes {
      yaml """
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: "jnlp"
            volumeMounts:
            - mountPath: /home/jenkins/.ssh
              name: volume-known-hosts
            env:
            - name: "HOME"
              value: "/home/jenkins"
            resources:
              limits:
                memory: "512Mi"
                cpu: "1"
              requests:
                memory: "512Mi"
                cpu: "1"
          - name: "hugo"
            image: "cibuilds/hugo:0.102"
            command:
            - cat
            tty: true
            resources:
              limits:
                memory: "512Mi"
                cpu: "1"
              requests:
                memory: "512Mi"
                cpu: "1"
          volumes:
          - configMap:
              name: known-hosts
            name: volume-known-hosts
        """
    }
  }

  environment {
    PROJECT_NAME = "californium" // must be all lowercase.
    PROJECT_BOT_NAME = "Californium Bot" // Capitalize the name
    WEBSITE_REPO_BRANCH_NAME = "main"
    WEBSITE_SRC_DIR="${WORKSPACE}/californium/site"
    WEBSITE_REPO_DIR="${WORKSPACE}/www"
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    checkoutToSubdirectory('californium')
    timeout(time: 15, unit: 'MINUTES')
  }

  stages {
    stage("Clone Californium web site repository") {
      steps {
        sshagent(credentials: [ "github-bot-ssh" ]) {
          sh '''#!/bin/bash
            git clone ssh://git@github.com/eclipse-californium/californium-website.git "${WEBSITE_REPO_DIR}"
            echo "scrubbing web site directory..."
            (cd "${WEBSITE_REPO_DIR}"; git rm -r --quiet -- ':!README.md'; cp "${WORKSPACE}/californium/LICENSE" .)
          '''
        }
      }
    }

    stage("Build web site (main) using Hugo") {
      steps {
        container("hugo") {
          dir("${WEBSITE_SRC_DIR}") {
            sh '''#!/bin/bash
              hugo -v -d "${WEBSITE_REPO_DIR}" -b "https://www.eclipse.org/${PROJECT_NAME}/"
            '''
          }
        }
      }
    }

    stage("Push to web site main branch") {
      steps {
        sshagent(credentials: [ "github-bot-ssh" ]) {
          sh '''#!/bin/bash
            cd "${WEBSITE_REPO_DIR}"
            git add -A
            if git diff --cached --quiet; then
              echo "no changes have been detected since last build, nothing to publish"
            else
              echo "changes have been detected, publishing to Californium website repo on GitHub"
              git config user.email "${PROJECT_NAME}-bot@eclipse.org"
              git config user.name "${PROJECT_BOT_NAME}"
              git commit -m "Website build ${JOB_NAME}-${BUILD_NUMBER}"
              git push origin "HEAD:${WEBSITE_REPO_BRANCH_NAME}"
            fi
          '''
        }
      }
    }
  }
}

